name: Vercel Production Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_test_and_deploy:
    permissions:
      contents: read
      pages: write
      id-token: write
      pull-requests: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm install and test
        run: |
          npm install --legacy-peer-deps
          npm test

      - name: Start Docker Stack for E2E
        run: |
          docker compose -f docker-compose.ci.yml up -d --build
          sleep 60 # attendre que MySQL soit prêt
          docker compose -f docker-compose.ci.yml ps
          docker compose -f docker-compose.ci.yml logs db
          echo "On vérifie que l'API FastAPI répond..."
          timeout 120 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:8000/api/users)" != "200" ]]; do sleep 2; done' || true
          echo "API check terminé"

      - name: Debug API connectivity
        run: |
          echo "Test des endpoints..."
          curl -f http://localhost:8000/ || (echo "Endpoint racine KO" && exit 1)
          echo "Test API root endpoint..."
          curl -f http://localhost:8000/api/ || (echo "Endpoint API racine KO" && exit 1)
          echo "Test users endpoint..."
          curl -f http://localhost:8000/api/users || (echo "Endpoint users KO" && exit 1)
          echo "Test de React..."
          curl -I http://localhost:3000 || (echo "React app KO" && exit 1)

      - name: Run E2E tests with Cypress
        uses: cypress-io/github-action@v6
        with:
          install: false
          wait-on: "http://localhost:3000, http://localhost:8000/api/users"
          wait-on-timeout: 180
          browser: chrome
          component: false
          record: false
          publish-summary: true
        env:
          CYPRESS_viewportWidth: 1920
          CYPRESS_viewportHeight: 1080

      - name: Stop Docker Stack
        run: |
          docker compose -f docker-compose.ci.yml down

      # Deploy Frontend to GitHub Pages
      - name: Build React App for GitHub Pages
        run: npm run build
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # Deploy Backend to Vercel
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Set proper permissions
        run: |
          # Ensure proper ownership of all files
          sudo chown -R $(whoami):$(whoami) . || true
          # Set proper permissions
          chmod -R 755 . || true
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Clean Python Cache Files Before Build
        run: |
          # Remove Python cache files with force (in case Docker created them)
          sudo find . -type f -name "*.pyc" -delete || true
          sudo find . -type d -name "__pycache__" -exec rm -rf {} + || true
          # Also clean up any other Python artifacts that might cause issues
          sudo rm -rf server/__pycache__ || true
          sudo rm -rf server/*.pyc || true
          # List contents to verify cleanup
          echo "Server directory contents after cleanup:"
          ls -la server/ || true
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Backend to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
